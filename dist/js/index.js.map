{"version":3,"sources":["index.js"],"names":["resizeCanvas","newCanvasSize","$","canvas","parent","width","PARENT_SIZE_TO_CANVAS_PROPORTION","height","setup","snake","x","Math","floor","FIELD_WIDTH","y","FIELD_HEIGHT","direction","_","sample","fruit","random","score","drawScore","startTime","now","canTurn","scoreCounter","html","highScore","highScoreCounter","draw","context","strokeStyle","fillStyle","clearRect","strokeRect","fillCircle","CELL_SIZE","msSinceStart","secSinceStart","timeCounter","prevTail","clone","last","isHeadTouchingCell","killSnake","moveSnake","checkIfSnakeEatsFruit","updateCellDirections","head","i","length","cell","clearInterval","gameLoopInterval","timeUpdateInterval","blinkingIsVisible","blinkingInterval","setInterval","fillRect","SNAKE_BLINKING_INTERVAL_MS","setTimeout","youDiedModalScore","youDiedModalTime","youDiedModal","modal","SNAKE_BLINKING_TIME_MS","normalizeCoord","tailCell","push","nextCell","coord","maxValue","runGame","GAME_LOOP_INTERVAL_MS","document","getElementById","getContext","leaderboard","youDiedModalPlayerName","canvasSize","window","on","debounce","KEY_CODES","leftArrow","upArrow","rightArrow","downArrow","w","a","s","d","enter","focus","playerName","val","isEmpty","prepend","keyup","evt","keyCode","radius","this","beginPath","centerX","centerY","arc","PI","fill","body"],"mappings":"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","file":"index.js","sourcesContent":["/*\n * Copyright (c) 2017 Dmytro Meleshko\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global _ */\n\n(function() {\n    'use strict';\n    var canvas = document.getElementById('canvas'),\n        context = canvas.getContext('2d'),\n        scoreCounter = $('#score-counter'),\n        highScoreCounter = $('#high-score-counter'),\n        timeCounter = $('#time-counter'),\n        leaderboard = $('#leaderboard > tbody'),\n        youDiedModal = $('#you-died-modal'),\n        youDiedModalPlayerName = $('#you-died-modal #player-name'),\n        youDiedModalScore = $('#you-died-modal #statistics-score'),\n        youDiedModalTime = $('#you-died-modal #statistics-time'),\n        gameLoopInterval, timeUpdateInterval;\n\n    var PARENT_SIZE_TO_CANVAS_PROPORTION = 1.1;\n    var canvasSize = resizeCanvas();\n\n    function resizeCanvas() {\n        var newCanvasSize = $(canvas).parent().width() / PARENT_SIZE_TO_CANVAS_PROPORTION;\n        canvas.height = canvas.width = newCanvasSize;\n        return newCanvasSize;\n    }\n\n    var FIELD_WIDTH = 30, // Field width in cells\n        FIELD_HEIGHT = 30, // Field height in cells\n        CELL_SIZE = canvasSize / FIELD_WIDTH,\n        GAME_LOOP_INTERVAL_MS = 100,\n        SNAKE_BLINKING_INTERVAL_MS = 150, // How fast snake blinks after death\n        SNAKE_BLINKING_TIME_MS = 2000; // How long snake blinks after death\n\n    // Adding responsivity for canvas\n    $(window).on('resize', _.debounce(function() {\n        // Size values are recalculated on each resize\n        canvasSize = resizeCanvas();\n        CELL_SIZE = canvas.width / FIELD_WIDTH;\n    }, GAME_LOOP_INTERVAL_MS));\n\n    var KEY_CODES = {\n        leftArrow: 37,\n        upArrow: 38,\n        rightArrow: 39,\n        downArrow: 40,\n        w: 87,\n        a: 65,\n        s: 83,\n        d: 68,\n        enter: 13\n    };\n\n    // Setting up \"You Died!\" modal\n    youDiedModal.on('shown.bs.modal', function() {\n        youDiedModalPlayerName.focus();\n    });\n    youDiedModal.on('hidden.bs.modal', function() {\n        var playerName = youDiedModalPlayerName.val();\n        if (!_.isEmpty(playerName))\n            leaderboard.prepend(\n                '<tr>' +\n                '<td>' + playerName + '</td>' +\n                '<td>' + score + '</td>' +\n                '<td>' + startTime + ' sec</td>' +\n                '</tr>');\n        runGame();\n    });\n    // Setting up \"You Died!\" modal's player name text field\n    youDiedModalPlayerName.keyup(function(evt) {\n        if (evt.keyCode == KEY_CODES.enter)\n            youDiedModal.modal('hide');\n    });\n\n    context.fillCircle = function fillCircle(x, y, radius) {\n        this.beginPath();\n        var centerX = x * CELL_SIZE + radius;\n        var centerY = y * CELL_SIZE + radius;\n        this.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n        this.fill();\n    };\n\n    // canTurn is used as fix for this bug: if player presses two keys in one game loop interval, snake can hit itself\n    var snake, fruit, score, startTime, canTurn, highScore = 0;\n\n    $(document.body).on('keydown', function(evt) {\n        if (canTurn) {\n            canTurn = false;\n            var keyCode = evt.keyCode;\n            var head = _.head(snake);\n            if ((keyCode == KEY_CODES.leftArrow || keyCode == KEY_CODES.a) && head.direction != 'right')\n                head.direction = 'left';\n            else if ((keyCode == KEY_CODES.upArrow || keyCode == KEY_CODES.w) && head.direction != 'down')\n                head.direction = 'up';\n            else if ((keyCode == KEY_CODES.rightArrow || keyCode == KEY_CODES.d) && head.direction !=\n                'left')\n                head.direction = 'right';\n            else if ((keyCode == KEY_CODES.downArrow || keyCode == KEY_CODES.s) && head.direction != 'up')\n                head.direction = 'down';\n        }\n    });\n\n    function setup() {\n        snake = [\n            // First element is the head of the snake\n            {\n                // Spawn snake in the center of the field\n                x: Math.floor(FIELD_WIDTH / 2),\n                y: Math.floor(FIELD_HEIGHT / 2),\n                // Getting random direction\n                direction: _.sample(['left', 'up', 'right', 'down'])\n            }\n        ];\n\n        // First fruit will be spawned on random cell\n        fruit = {\n            x: _.random(FIELD_WIDTH - 1),\n            y: _.random(FIELD_HEIGHT - 1)\n        };\n\n        score = 0;\n        drawScore();\n\n        startTime = _.now();\n        canTurn = true;\n    }\n\n    function drawScore() {\n        scoreCounter.html(score);\n        if (score > highScore)\n            highScore = score;\n        highScoreCounter.html(highScore);\n    }\n\n    function draw() {\n        context.strokeStyle = 'black';\n        context.fillStyle = 'black';\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.strokeRect(0, 0, canvas.width, canvas.height);\n\n        context.fillCircle(fruit.x, fruit.y, CELL_SIZE / 2 - 1);\n\n        var msSinceStart = _.now() - startTime;\n        var secSinceStart = Math.floor(msSinceStart / 1000);\n        timeCounter.html(secSinceStart + ' sec');\n\n        // Saving data from previous last cell, to spawn there new cell, if snake eats fruit\n        var prevTail = _.clone(_.last(snake));\n\n        if (isHeadTouchingCell()) {\n            killSnake();\n            return;\n        }\n\n        moveSnake();\n        checkIfSnakeEatsFruit(prevTail);\n        updateCellDirections();\n\n        canTurn = true;\n    }\n\n    function isHeadTouchingCell() {\n        var head = _.head(snake);\n\n        for (var i = 1; i < snake.length; i++) {\n            var cell = snake[i];\n            if (head.x == cell.x && head.y == cell.y) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function killSnake() {\n        clearInterval(gameLoopInterval);\n        clearInterval(timeUpdateInterval);\n\n        var blinkingIsVisible = true;\n        var blinkingInterval = setInterval(function() {\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            context.strokeRect(0, 0, canvas.width, canvas.height);\n\n            if (blinkingIsVisible) {\n                for (var i = 0; i < snake.length; i++) {\n                    var cell = snake[i];\n                    context.fillRect(cell.x * CELL_SIZE, cell.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n                }\n            }\n\n            blinkingIsVisible = !blinkingIsVisible;\n        }, SNAKE_BLINKING_INTERVAL_MS);\n\n        setTimeout(function() {\n            clearInterval(blinkingInterval);\n            youDiedModalScore.html(score);\n            youDiedModalTime.html(startTime + ' sec');\n            youDiedModal.modal('show');\n        }, SNAKE_BLINKING_TIME_MS);\n    }\n\n    function moveSnake() {\n        for (var i = 0; i < snake.length; i++) {\n            var cell = snake[i];\n            context.fillRect(cell.x * CELL_SIZE, cell.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n\n            if (cell.direction == 'left') cell.x--;\n            else if (cell.direction == 'up') cell.y--;\n            else if (cell.direction == 'right') cell.x++;\n            else if (cell.direction == 'down') cell.y++;\n\n            cell.x = normalizeCoord(cell.x, FIELD_WIDTH);\n            cell.y = normalizeCoord(cell.y, FIELD_HEIGHT);\n        }\n    }\n\n    function checkIfSnakeEatsFruit(tailCell) {\n        var head = _.head(snake);\n\n        if (head.x == fruit.x && head.y == fruit.y) {\n            snake.push(tailCell);\n\n            fruit = {\n                x: _.random(FIELD_WIDTH - 1),\n                y: _.random(FIELD_HEIGHT - 1)\n            };\n\n            score++;\n            drawScore();\n        }\n    }\n\n    function updateCellDirections() {\n        for (var i = snake.length - 1; i >= 1; i--) {\n            var cell = snake[i];\n            var nextCell = snake[i - 1];\n            cell.direction = nextCell.direction;\n        }\n    }\n\n    function normalizeCoord(coord, maxValue) {\n        coord = coord % maxValue;\n        if (coord < 0) coord = maxValue + coord;\n        return coord;\n    }\n\n    function runGame() {\n        setup();\n        gameLoopInterval = setInterval(draw, GAME_LOOP_INTERVAL_MS);\n    }\n\n    runGame();\n}());\n"],"sourceRoot":"../src/css"}